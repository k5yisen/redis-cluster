version: "3.9"

# This docker-compose uses host network mode
# This allows Go clients to connect directly without docker exec

services:
  redis-7001:
    image: redis:8.2.2
    container_name: redis-7001
    command: ["redis-server", "/data/redis.conf"]
    network_mode: "host"
    volumes: ["./data/7001:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis-7002:
    image: redis:8.2.2
    container_name: redis-7002
    command: ["redis-server", "/data/redis.conf"]
    network_mode: "host"
    volumes: ["./data/7002:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis-7003:
    image: redis:8.2.2
    container_name: redis-7003
    command: ["redis-server", "/data/redis.conf"]
    network_mode: "host"
    volumes: ["./data/7003:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7003", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis-7004:
    image: redis:8.2.2
    container_name: redis-7004
    command: ["redis-server", "/data/redis.conf"]
    network_mode: "host"
    volumes: ["./data/7004:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7004", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis-7005:
    image: redis:8.2.2
    container_name: redis-7005
    command: ["redis-server", "/data/redis.conf"]
    network_mode: "host"
    volumes: ["./data/7005:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7005", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis-7006:
    image: redis:8.2.2
    container_name: redis-7006
    command: ["redis-server", "/data/redis.conf"]
    network_mode: "host"
    volumes: ["./data/7006:/data"]
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7006", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

  init-cluster:
    image: redis:8.2.2
    container_name: redis-init-cluster
    depends_on:
      redis-7001: { condition: service_healthy }
      redis-7002: { condition: service_healthy }
      redis-7003: { condition: service_healthy }
      redis-7004: { condition: service_healthy }
      redis-7005: { condition: service_healthy }
      redis-7006: { condition: service_healthy }
    network_mode: "host"
    restart: "no"
    command: 
      - sh
      - -c
      - |
        echo "Checking if cluster already formed..."
        if redis-cli -h 127.0.0.1 -p 7001 cluster info 2>/dev/null | grep -q "cluster_state:ok"; then
          echo "Cluster already OK. Skipping creation."
          exit 0
        fi
        echo "Creating Redis Cluster (3 masters + 3 replicas)..."
        redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 --cluster-yes
        echo "Cluster created successfully!"
        echo "Waiting for cluster state to stabilize..."
        sleep 5
        redis-cli -h 127.0.0.1 -p 7001 cluster info | grep cluster_state
