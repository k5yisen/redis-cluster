version: '3'

vars:
  PORTS: "7001 7002 7003 7004 7005 7006"
  COMPOSE_FILE: docker-compose-host.yml

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list

  setup:
    desc: "Complete Ubuntu Redis Cluster setup (all steps)"
    cmds:
      - task: check-os
      - task: copy-configs
      - task: clean-state
      - task: stop-cluster
      - task: start-cluster
      - task: wait-cluster
      - task: status

  check-os:
    desc: "Check if running on Linux"
    silent: true
    cmds:
      - |
        echo "🚀 Ubuntu Redis Cluster Setup"
        echo "================================"
        echo ""
        if [[ "$OSTYPE" != "linux-gnu"* ]]; then
            echo "⚠️  Warning: This script is designed for Ubuntu/Linux"
            echo "   You are running on: $OSTYPE"
            echo "   For macOS, use: task setup-macos"
            echo ""
        fi

  copy-configs:
    desc: "Copy Ubuntu config files to data directories"
    silent: true
    cmds:
      - |
        echo "📁 Step 1: Copying Ubuntu config files..."
        for port in {{.PORTS}}; do
          echo "   Copying config-ubuntu/redis-$port.conf → data/$port/redis.conf"
          cp config-ubuntu/redis-$port.conf data/$port/redis.conf
        done
        echo "✅ Config files copied"
        echo ""

  clean-state:
    desc: "Clean old cluster state"
    silent: true
    cmds:
      - |
        echo "🧹 Step 2: Cleaning old cluster state..."
        rm -f data/*/nodes.conf
        echo "✅ Old cluster state removed"
        echo ""

  stop-cluster:
    desc: "Stop existing cluster"
    silent: true
    cmds:
      - |
        echo "🛑 Step 3: Stopping existing cluster..."
        docker compose -f {{.COMPOSE_FILE}} down 2>/dev/null || true
        echo "✅ Cluster stopped"
        echo ""

  start-cluster:
    desc: "Start Redis Cluster"
    silent: true
    cmds:
      - |
        echo "🚀 Step 4: Starting Redis Cluster with host networking..."
        docker compose -f {{.COMPOSE_FILE}} up -d
        echo "✅ Cluster started"
        echo ""

  wait-cluster:
    desc: "Wait for cluster to be ready"
    silent: true
    cmds:
      - |
        echo "⏳ Step 5: Waiting for cluster to form (this takes ~15-20 seconds)..."
        sleep 5
        echo "   Checking cluster status..."
        
        # Wait up to 30 seconds for cluster to be ready
        for i in {1..30}; do
          if docker exec redis-7001 redis-cli -p 7001 cluster info 2>/dev/null | grep -q "cluster_state:ok"; then
            echo "✅ Cluster is ready!"
            break
          fi
          echo "   Waiting... ($i/30)"
          sleep 1
        done
        echo ""

  status:
    desc: "Show cluster status"
    silent: true
    cmds:
      - |
        echo "📊 Cluster Status:"
        echo "=================="
        docker exec redis-7001 redis-cli -p 7001 cluster info | grep -E "cluster_state|cluster_slots|cluster_known_nodes"
        echo ""
        echo "🎉 Setup Complete!"
        echo "=================="
        echo ""
        echo "Cluster Nodes:"
        docker exec redis-7001 redis-cli -p 7001 cluster nodes | grep -E "master|slave" | head -6
        echo ""
        echo "📝 Next Steps:"
        echo "   1. Test connection: redis-cli -p 7001 cluster info"
        echo "   2. Run Go example: cd app && go run example-host.go"
        echo "   3. View logs: docker logs redis-init-cluster"
        echo ""
        echo "✅ Your Redis Cluster is ready at localhost:7001-7006"

  setup-macos:
    desc: "Setup Redis Cluster for macOS"
    silent: true
    cmds:
      - |
        echo "🚀 macOS Redis Cluster Setup"
        echo "================================"
        echo ""
        echo "🛑 Stopping existing cluster..."
        docker compose -f docker-compose-macos.yml down 2>/dev/null || true
        echo "✅ Cluster stopped"
        echo ""
        echo "🚀 Starting Redis Cluster..."
        docker compose -f docker-compose-macos.yml up -d
        echo "✅ Cluster started"
        echo ""
        echo "⏳ Waiting for cluster to form..."
        sleep 5
        for i in {1..30}; do
          if docker exec redis-7001 redis-cli -p 7001 cluster info 2>/dev/null | grep -q "cluster_state:ok"; then
            echo "✅ Cluster is ready!"
            break
          fi
          echo "   Waiting... ($i/30)"
          sleep 1
        done
      - task: status

  logs:
    desc: "View cluster logs"
    cmds:
      - docker logs redis-init-cluster

  logs-follow:
    desc: "Follow cluster logs"
    cmds:
      - docker logs -f redis-init-cluster

  restart:
    desc: "Restart the cluster"
    cmds:
      - task: stop-cluster
      - task: start-cluster
      - task: wait-cluster
      - task: status

  clean:
    desc: "Clean cluster and remove all data"
    silent: true
    cmds:
      - |
        echo "🧹 Cleaning cluster..."
        docker compose -f {{.COMPOSE_FILE}} down -v
        rm -f data/*/nodes.conf
        echo "✅ Cluster cleaned"

  test:
    desc: "Test cluster connection"
    cmds:
      - redis-cli -p 7001 cluster info

  go-test:
    desc: "Run Go test connection"
    dir: app
    cmds:
      - go run test-connection.go

  go-example:
    desc: "Run Go example"
    dir: app
    cmds:
      - go run example-host.go

  nodes:
    desc: "Show cluster nodes"
    cmds:
      - docker exec redis-7001 redis-cli -p 7001 cluster nodes

  info:
    desc: "Show cluster info"
    cmds:
      - docker exec redis-7001 redis-cli -p 7001 cluster info
